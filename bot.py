import requests
import json
import time
from datetime import datetime, timedelta

# Set your Discord Webhook URL here
DISCORD_WEBHOOK_URL = ""

# Set the NIST CVE API URL
NIST_API_URL = "https://services.nvd.nist.gov/rest/json/cves/2.0/"

# Dictionary to track posted CVEs and prevent duplicates
posted_cves = {}

def get_recent_cves():
    # Fetches all CVEs from NIST API published in the last 3 hours

    end_date = datetime.utcnow()
    start_date = end_date - timedelta(hours=3)

    params = {
        "pubStartDate": start_date.strftime("%Y-%m-%dT%H:%M:%S.000Z"),
        "pubEndDate": end_date.strftime("%Y-%m-%dT%H:%M:%S.000Z"),
        "resultsPerPage": 2000,  # Fetch maximum records per page
        "startIndex": 0
    }

    all_cves = []
    while True:
        print(f"[{datetime.utcnow()}] Sending request to NIST API with params: {params}", flush=True)
        
        try:
            response = requests.get(NIST_API_URL, params=params)
            response.raise_for_status()  # Raises exception for non-2xx responses
            data = response.json()
            vulnerabilities = data.get("vulnerabilities", [])
            
            print(f"[{datetime.utcnow()}] Received {len(vulnerabilities)} CVEs from NIST API.", flush=True)
            print(f"[{datetime.utcnow()}] Full response content: {response.text}", flush=True)
            
            all_cves.extend(vulnerabilities)

            # Check if there are more CVEs to fetch
            if len(vulnerabilities) < params['resultsPerPage']:
                break

            # Update startIndex for pages
            params["startIndex"] += params["resultsPerPage"]

        except requests.RequestException as e:
            print(f"[{datetime.utcnow()}] Error fetching data from NIST API: {e}", flush=True)
            break

    return all_cves

def send_discord_message(cve):
    # Sends a CVE alert to Discord
    
    # Fetch CVE ID and ensure it exists
    cve_id = cve['cve'].get('id', 'N/A')

    # Fetch description
    description = cve['cve'].get('descriptions', [{}])[0].get('value', 'No description available')

    # Fetch published date
    published_date = cve['cve'].get('published', 'N/A')

    # Fetch base score
    base_score = 'N/A'
    metrics = cve['cve'].get('metrics', {})
    cvss_metrics = metrics.get('cvssMetricV40', []) or metrics.get('cvssMetricV31', []) or metrics.get('cvssMetricV2', [])
    if cvss_metrics:
        base_score = cvss_metrics[0].get('cvssData', {}).get('baseScore', 'N/A')

    # Fetch vendor comments
    vendor_comments = cve['cve'].get('vendorComments', [])
    vendor_comments_str = "\n".join([f"- {comment.get('value', '')}" for comment in vendor_comments]) or "No vendor comments available"

    # Fetch weaknesses
    weaknesses = cve['cve'].get('weaknesses', [])
    weakness_values = [weakness.get('description', [{}])[0].get('value', '') for weakness in weaknesses]
    weaknesses_str = ", ".join(filter(None, weakness_values)) or "No weaknesses specified"

    message = {
        "content": f"# {cve_id}\n"
                   f"**Base Score**: {base_score}\n"
                   f"**Published Date**: {published_date}\n"
                   f"**CVE Link**: https://nvd.nist.gov/vuln/detail/{cve_id}\n"
                   f"**Description**: {description}\n"
                   f"**Vendor Comments**: {vendor_comments_str}\n"
                   f"**Weaknesses**: {weaknesses_str}\n"
    }

    # Print the message content for debugging
    #print(f"[{datetime.utcnow()}] Message to be sent to Discord:", flush=True)
    #print(json.dumps(message, indent=2), flush=True)

    headers = {"Content-Type": "application/json"}
    print(f"[{datetime.utcnow()}] Sending notification to Discord for CVE: {cve_id}", flush=True)
    
    try:
        response = requests.post(DISCORD_WEBHOOK_URL, data=json.dumps(message), headers=headers)
        response.raise_for_status()  # Raises exception for non-2xx responses
        print(f"[{datetime.utcnow()}] Notification sent for CVE {cve_id}: {response.status_code}", flush=True)
    except requests.RequestException as e:
        print(f"[{datetime.utcnow()}] Failed to send Discord message for CVE {cve_id}: {e}", flush=True)

def main():
    print(f"[{datetime.utcnow()}] Starting bot. Checking CVEs published in the last 3 hours.", flush=True)

    while True:
        # Fetch all CVEs published in the last 3 hours
        cves = get_recent_cves()

        if not cves:
            print(f"[{datetime.utcnow()}] No new CVEs found.", flush=True)
        
        for cve in cves:
            # Check if CVE has already been posted
            if cve['cve']['id'] not in posted_cves:
                send_discord_message(cve)
                posted_cves[cve['cve']['id']] = True  # Mark this CVE as posted

        # Sleep for 3600 seconds (60 minutes) before checking again
        print(f"[{datetime.utcnow()}] Sleeping for 3600 seconds before checking for new CVEs.", flush=True)
        time.sleep(3600)

if __name__ == "__main__":
    main()
